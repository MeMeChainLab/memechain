

syntax = "proto3";


/*************************************Transaction-related agreements*************************************/
import "sign.proto";
// import "block.proto";

//sign node massage
message SignNodeMsg
{
	string id   = 1; //id Signing node ID
	bytes sign	= 2; //Sign node signature information
	bytes pub   = 3; //The signer's public key
}

//Transaction transfer information
message TxMsgInfo
{
  uint32    type    = 1; //Transaction flow type
  bytes     tx      = 2; //Transaction Information
  uint64    nodeHeight  = 3; //The height value of the initiating transaction node
  uint64    txUtxoHeight  = 4;
  repeated string contractStorageList = 5;  //contract storage list
}

//PC-side transaction Req information body
message TxMsgReq
{
  string       version              = 1; //version					
  TxMsgInfo    txMsgInfo            = 2; //transaction information
	repeated SignNodeMsg signNodeMsg  = 3; //The signature information of the signing node in the transaction flow
	repeated string prevBlkHashs      = 4; //hashs		Pre-block hashs	

}

message VrfData
{
  string  hash = 1;
  uint64  range = 2;
  uint64  percentage  = 3;
  uint64  height = 4;
  string  targetAddr  = 5;
  repeated string  vrfList = 6;
  string  txvrfinfohash = 7;
}
message Vrf
{
  VrfData vrfdata = 1;
  CSign  Vrfsign = 2;
}

message VRFBlockInfo
{
  string blockHash  = 1;
  uint64 height     = 2;
}

message VRFConsensusInfo
{
  string vrfSeed = 1;
  repeated VRFBlockInfo blockinfo = 2;
  CSign  Vrfsign = 3;
}

////PC-side transaction Ack information body
message TxMsgAck
{
  string version = 1; //version
  int32 code     = 2; //Error code
  string message = 3; //Returns an error message

  bytes tx = 4;       //transaction
}

//block broadcast msg
message BuildBlockBroadcastMsg
{
  string      version         = 1;   //version	
  string      id              = 2;   //self node id
	bytes 		  blockRaw		    = 3;	 //block information
  int32       flag            = 4;   //flag
  int32       type            = 5;   //type
  repeated string castAddrs   = 6;   //broadcast destination address
}

//Contract transaction massage
message ContractTxMsgReq
{
  string   version   = 1; //version
  TxMsgReq txMsgReq  = 2; 
  repeated string contractDependentAddress = 3; //contract address
}

//Contract transaction Packager massage
message ContractPackagerMsg
{
  string version  = 1;  //version
  CSign  sign     = 2;  //sign
  repeated TxMsgReq txMsgReq = 3;
}
